definitions:
  user.CreateUserRequest:
    description: Request payload for creating a new user.
    properties:
      email:
        description: |-
          Email address of the user. Must be a valid email format and unique.
          required: true
        type: string
      full_name:
        description: |-
          Full name of the user.
          required: true
        type: string
      password:
        description: |-
          Password for the new user. Minimum 6 characters.
          required: true
        minLength: 6
        type: string
      username:
        description: |-
          Username for the new user. Must be alphanumeric and unique.
          required: true
        type: string
    required:
    - email
    - full_name
    - password
    - username
    type: object
  user.LoginUserRequest:
    description: Request payload for logging in a user.
    properties:
      password:
        description: |-
          Password of the user
          required: true
        type: string
      username:
        description: |-
          Username of the user
          required: true
        type: string
    required:
    - password
    - username
    type: object
  user.LoginUserResponse:
    properties:
      access_token:
        description: |-
          Access token for the user
          required: true
        type: string
      user:
        description: |-
          User information
          required: true
        properties:
          email:
            description: |-
              Email of the user
              required: true
            type: string
          full_name:
            description: |-
              Full name of the user
              required: true
            type: string
          id:
            description: |-
              ID of the user
              required: true
            type: string
          username:
            description: |-
              Username of the user
              required: true
            type: string
        type: object
    type: object
  user.model:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /api/v1/user:
    get:
      parameters:
      - description: '{''and'': [ {''title'': { ''cont'':''cul'' } } ]}'
        in: query
        name: s
        type: string
      - description: 'fields to select eg: name,age'
        in: query
        name: fields
        type: string
      - description: page of pagination
        in: query
        name: page
        type: integer
      - description: limit of pagination
        in: query
        name: limit
        type: integer
      - description: 'join relations eg: category, parent'
        in: query
        name: join
        type: string
      - collectionFormat: csv
        description: 'filters eg: name||eq||ad price||gte||200'
        in: query
        items:
          type: string
        name: filter
        type: array
      - collectionFormat: csv
        description: 'filters eg: created_at,desc title,asc'
        in: query
        items:
          type: string
        name: sort
        type: array
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.model'
            type: array
      tags:
      - user
    post:
      parameters:
      - description: item to create
        in: body
        name: '{object}'
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.model'
      tags:
      - user
  /api/v1/user/{id}:
    delete:
      parameters:
      - description: uuid of item
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: ok
          schema:
            type: string
      tags:
      - user
    get:
      parameters:
      - description: uuid of item
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.model'
      tags:
      - user
    patch:
      parameters:
      - description: uuid of item
        in: path
        name: id
        required: true
        type: string
      - description: update body
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/user.model'
      responses:
        "200":
          description: ok
          schema:
            type: string
      tags:
      - user
  /api/v1/user/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token and user info
          schema:
            $ref: '#/definitions/user.LoginUserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login user
      tags:
      - user
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
